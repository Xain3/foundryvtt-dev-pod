#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
# Script entrypoint wrapper template
#
# This file provides a template for creating thin shell wrappers that delegate
# to Node.js CLI implementations following the entrypoint+common pattern.
#
# Purpose
#   Provide a consistent entrypoint pattern for CLI tools that:
#   - Delegates to Node.js implementation for main logic
#   - Provides shell-level features like environment setup if needed
#   - Maintains consistent interface and error handling patterns
#   - Preserves exit codes from Node.js implementations
#
# Architecture Pattern (entrypoint+common)
#   This template supports the entrypoint+common pattern where:
#   - scripts/entrypoint/tool-name     (this file) - thin shell wrapper
#   - scripts/tool-name.mjs            - CLI argument parsing and user interface
#   - scripts/common/tool-name.mjs     - script-specific orchestration logic
#   - helpers/                         - project-level domain logic (reusable)
#
# Usage Instructions
#   1. Copy this template to scripts/entrypoint/{your-tool-name}
#   2. Replace XX with appropriate ordering number if needed
#   3. Replace {SCRIPT_NAME} with your actual script name
#   4. Replace {TOOL_DESCRIPTION} with description of your tool
#   5. Update CLI_SCRIPT path to point to your Node.js entry point
#   6. Make executable: chmod +x scripts/entrypoint/{your-tool-name}
#   7. Create corresponding Node.js files:
#      - scripts/{your-tool-name}.mjs (CLI interface)
#      - scripts/common/{your-tool-name}.mjs (orchestration logic)
#
# Environment Variables (optional)
#   NODE_BIN                   Override Node.js executable (default: node)
#   SCRIPT_DEBUG              Set to "1" to enable debug output
#   SCRIPT_DRY_RUN           Set to "1" to enable dry-run mode by default
#
# Example Usage Patterns
#   {SCRIPT_NAME}                      # Basic usage
#   {SCRIPT_NAME} --help               # Show help
#   {SCRIPT_NAME} --dry-run            # Dry-run mode
#   {SCRIPT_NAME} --json               # JSON output (if supported)
#   {SCRIPT_NAME} --verbose            # Verbose mode (if supported)
#
# Error Handling
#   - Validates Node.js script exists before execution
#   - Preserves exit codes from Node.js implementation
#   - Provides meaningful error messages for common issues
#   - Handles script execution failures gracefully
#
# Customization Points
#   - Environment setup: Add env var exports before exec
#   - Path resolution: Modify CLI_SCRIPT path for different layouts
#   - Validation: Add pre-execution checks if needed
#   - Logging: Add shell-level logging if required
# -----------------------------------------------------------------------------

# Script metadata (replace these values)
SCRIPT_NAME="{SCRIPT_NAME}"                    # e.g., "fvtt-status"
TOOL_DESCRIPTION="{TOOL_DESCRIPTION}"          # e.g., "FoundryVTT pod status checker"

# Debug output if enabled
if [[ "${SCRIPT_DEBUG:-0}" == "1" ]]; then
    echo "[debug] Starting ${SCRIPT_NAME} entrypoint wrapper"
    echo "[debug] Arguments: $*"
fi

# Resolve the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Path to the Node.js CLI script (relative to entrypoint directory)
CLI_SCRIPT="${SCRIPT_DIR}/../${SCRIPT_NAME}.mjs"

# Validate Node.js script exists
if [[ ! -f "${CLI_SCRIPT}" ]]; then
    echo "Error: Node.js script not found: ${CLI_SCRIPT}" >&2
    echo "Please ensure ${SCRIPT_NAME}.mjs exists in the scripts directory." >&2
    exit 1
fi

# Determine Node.js executable
NODE_EXECUTABLE="${NODE_BIN:-node}"

# Validate Node.js is available
if ! command -v "${NODE_EXECUTABLE}" >/dev/null 2>&1; then
    echo "Error: Node.js executable not found: ${NODE_EXECUTABLE}" >&2
    echo "Please install Node.js or set NODE_BIN environment variable." >&2
    exit 1
fi

# Optional: Add environment setup here
# export SOME_VAR="value"
# export ANOTHER_VAR="${HOME}/.config/tool"

# Optional: Handle dry-run mode at shell level
if [[ "${SCRIPT_DRY_RUN:-0}" == "1" ]] && [[ ! " $* " =~ " --dry-run " ]] && [[ ! " $* " =~ " -n " ]]; then
    echo "[dry-run] Adding --dry-run flag due to SCRIPT_DRY_RUN environment variable"
    set -- "$@" "--dry-run"
fi

# Debug: Show final command if debug enabled
if [[ "${SCRIPT_DEBUG:-0}" == "1" ]]; then
    echo "[debug] Executing: ${NODE_EXECUTABLE} ${CLI_SCRIPT} $*"
fi

# Delegate to Node.js script with all arguments and preserve exit code
# Using exec to replace the shell process with Node.js process
exec "${NODE_EXECUTABLE}" "${CLI_SCRIPT}" "$@"